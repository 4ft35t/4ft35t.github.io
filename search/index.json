[{"content":"Pixel 一代可以无限上传原始质量的照片和视频到 Google Photos，是 NAS 上照片异地备份的好选择。\nTLDR 手机端设置  Pixel 手机无需 root，安装 Solid Explorer, 开启 FTP 服务。FTP 默认端口 9999, 默认目录 /sdcard/Download/。 在 FTP 目录放一张图片（使用 Solid Explorer 复制、浏览器从网上下载、FTP 上传均可），Google Photos 会询问是否备份此目录，选备份。  NAS 设置 群晖自带的 curl 不支持 FTP，需要下载一个静态编译开启 FTP 支持的 curl。可以在 https://github.com/moparisthebest/static-curl/releases 下载。\n 下载 curl 并重命名成 curl-amd64, 并执行 chmod +x curl-amd64 下载上传脚本https://gist.github.com/4ft35t/8024c8815a115ec134dd15965ed47fc5, 和 curl-amd64 一起放到家目录。 修改 photo-upload.sh 中配置   ftp_server 手机 FTP server 地址，Solid Explorer 中可以看到 limit_size 脚本运行一次上传的图片/视频数量，过大会导致手机存储空间被占满 PHOTO_DIRS 19 行不动，修改 16 行，一行一个目录。我的群晖照片总库 /volume1/photo, 同时各用户使用 Synology Photos 备份手机照片到自己 home 目录, 17 行会加载所有用户目录下的照片，无需单独配置。 控制面板-任务计划-新增-计划的任务-用户定义的脚本  用户帐号选 admin 计划-运行频率-每小时 任务设置-用户定义的脚本，bash /volume1/homes/xx/photo-upload.sh，xx 是自己在 NAS 上用户    点击确定后，右键-运行，即可在手机上看到上传的照片/视频。\n脚本根据 NAS 上照片的修改时间来增量备份，需要定期去手机上释放空间，避免手机空间占满。具体操作路径：Google 相册-右上角头像-释放空间。\n2022.03.20 更新，使用 Autojs 自动释放手机空间 环境准备  https://github.com/Ericwyn/Auto.js/releases/download/V4.1.1.Alpha2/autoJs-V4.1.1.Alpha2-common-armeabi-v7a-debug.apk https://raw.githubusercontent.com/4ft35t/utils/master/autojs/utils.js https://gist.github.com/4ft35t/8024c8815a115ec134dd15965ed47fc5#file-google-photo-free-up-space-js  操作步骤  安装 autojs, 运行 app， 并按照提示打开无障碍服务。 将 utils.js 和 google-photo-free-up-space.js 放到手机 /sdcard/Scripts 目录 打开 autojs，下拉刷新，点击 google-photo-free-up-space.js 右边的三角符号运行 确认正常后，点击 google-photo-free-up-space.js 右边三点\u0026ndash;更多\u0026ndash;定时任务，设置每天运行时间  google-photo-free-up-space.js 中 text() 函数是在界面查找文本，如果系统语言不是英文，需要自行调整 21-22 行内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  auto(); console.show() var utils = require(\u0026#39;utils.js\u0026#39;); pkgName=\u0026#39;com.google.android.apps.photos\u0026#39; utils.startApp(pkgName) toastLog(\u0026#39;启动\u0026#39; + pkgName + \u0026#39;，等待检测中\u0026#39;) waitForPackage(pkgName) toastLog(\u0026#39;检测到\u0026#39; + pkgName + \u0026#39;等待 Activity\u0026#39;) waitForActivity(\u0026#34;com.google.android.apps.photos.home.HomeActivity\u0026#34;) toastLog(\u0026#39;找到首页 Activity\u0026#39;) // 点击头像 id(\u0026#34;og_apd_internal_image_view\u0026#34;).waitFor() utils.click(id(\u0026#34;og_apd_internal_image_view\u0026#34;)) toastLog(\u0026#39;找到头像，点击\u0026#39;) // 点击 free up text(\u0026#34;Free up space\u0026#34;).waitFor() utils.click(text(\u0026#34;Free up space\u0026#34;)) toastLog(\u0026#39;进入释放界面\u0026#39;) sleep(500) // 点击释放按钮 if (id(\u0026#34;free_up_button\u0026#34;).exists()) { utils.click(id(\u0026#34;free_up_button\u0026#34;)) } toastLog(\u0026#39;任务完成\u0026#39;) // 返回 app 主界面 back() // 2 次返回退出 app back(); back(); console.hide()   踩坑过程 最初的设想，termux 安装 rclone, 然后将 NAS 共享目录挂载到本地目录，最后在相册里备份本地目录。\nrclone 挂载 SFTP\n群晖开启 STFP 支持，手机上 termux 里配置 rclone 一切正常，到执行 rclone mount 时报 /etc/fstab 问题，具体记不清，因该是和手机没有 root 有关。\nrclone 挂载 WebDAV\nWebDAV 在 rclone 里不支持 rclone mount。\n挂载 SMB 共享文件夹\n找了几个文件管理器，都只能挂载给自己使用，不能提供给别的 app。只有 root 后才能全局挂载。\n参考链接  Choose the upload size of your photos \u0026amp; videos How to use OG Pixel as an unlimited Google Photos uploader Original Pixel Phone – The Unlimited Google Photos Uploader rclone SFTP configuration mount-cifs-in-android ","date":"2022-02-27T23:41:49+08:00","permalink":"https://4ft35t.github.io/post/backup-nas-photo-to-goole-photo-via-pixel-for-unlimited/","title":"利用 Pixel 一代的无限存储备份 NAS 照片"},{"content":"某些日常的特殊场景，需要远程截屏并传输，记录下使用 autojs + cgi + adb 实现过程。\n背景 云闪付公交乘车码，每周使用三次可以获得一张 6-5 消费券，但那一个帐号一周只能领一次，需要多个帐号。\n家里有个老华为手机，上面登录的有老人的云闪付帐号，但是注册帐号的手机号失效，无法更换新手机号，新设备登录需要短信验证码，只有拿这个手机去刷。\n不想带多个手机出门，开启折腾之路。\n截屏 系统自带 screencap 命令，桌面和别的 app 可以截屏，云闪付不行，应该是云闪付设置了FLAG_SECURE。\nscrcpy 可以显示云闪付内容，猜测 autojs 使用 cast 模式也可以截屏，实测确实可以。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  auto(); app.launch(\u0026#34;com.unionpay\u0026#34;); waitForPackage(\u0026#34;com.unionpay\u0026#34;); // 首页点击乘车码 sleep(1500) if(text(\u0026#34;充值中心\u0026#34;).exists()){ toastLog(\u0026#34;找到 乘车码 关键字\u0026#34;); target = text(\u0026#34;乘车码\u0026#34;).findOne(); while(!target.clickable()){ target = target.parent() } target.click() } waitForActivity(\u0026#34;com.unionpay.activity.react.UPActivityReactNative\u0026#34;); sleep(2000); // 2、请求截图 if(!requestScreenCapture()){ toastLog(\u0026#34;请求截图失败\u0026#34;); exit(); } // 3、进行截图 captureScreen(\u0026#34;/sdcard/img.png\u0026#34;); toastLog(\u0026#34;截图完成\u0026#34;);   触发 一开始设想的是 autojs 监听通知，使用 Bark 的安卓客户端 PushLite 来接收通知触发截图，然而 PushLite 需要 Google FCM，安装太折腾，放弃，寻求电脑端触发的方案。\n一番搜索，决定用 cgi 来接收外部请求并触发截图，各种依赖最少。\n电脑上连接多个安卓手机，执行 adb 命令需要指定设备 id，设备 id 用 adb devices 获取\n1 2 3  adb devices List of devices attached NXTDU1xxxxxxxxx device   NXTDU1xxxxxxxxx 就是设备 id\nyunshanfu.sh\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  #!/bin/bash echo \u0026#34;Content-Type:text/html\u0026#34; echo \u0026#34;\u0026#34; echo \u0026#39;\u0026lt;html\u0026gt;\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;\u0026lt;body\u0026gt;\u0026#39; dev=NXTDU1xxxxxxxxx img=/sdcard/img.png adb(){ /usr/bin/adb -s $dev $@ } cleanup(){ adb shell rm $img rm /tmp/ysf.png } unlock(){ adb shell input keyevent 224 adb shell input swipe 300 500 300 1500 adb shell input text 12345678 } screenshoot(){ adb shell am start -n org.autojs.autojs/.external.open.RunIntentActivity -d /sdcard/Scripts/ysf.js sleep 3 while true do # 校验文件大小，避免 pull 回来未写完图片 adb pull $img /tmp/ysf.png \u0026amp;\u0026amp; [ \u0026#34;$(stat -c %s /tmp/ysf.png)\u0026#34; -ge 300000 ] \u0026amp;\u0026amp; break sleep 1 done # press power button adb shell input keyevent 26 } cleanup unlock screenshoot echo \u0026#34;\u0026lt;img src=\u0026#39;data:image/png;base64,$(cat /tmp/ysf.png | base64 -w 0)\u0026#39;\u0026gt;\u0026#34; echo \u0026#34;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;\u0026#34;   python http.server 的 cgi 脚本需要放在 cgi-bin 目录\n1 2 3 4  chmod +x yunshanfu.sh mkdir cgi-bin mv yunshanfu.sh cgi-bin python3 -m http.server --cgi   浏览器访问 http://127.0.0.1:8000/cgi-bin/yunshanfu.sh, 即可触发截图，并在当前页面展示截图。\n设置端口转发，公网访问效果如图 最后，所有相关代码在 https://github.com/4ft35t/Android-Screenshoot-Remote\n","date":"2021-08-06T16:51:31+08:00","permalink":"https://4ft35t.github.io/post/android-screenshoot-remote/","title":"Android 远程截图"},{"content":"最初了解到 PD 电源 type-c 输出转 DC 圆头输出，是在 twitter 上，当时作者说从淘宝买了 PD 诱骗器，可以用 PD 头给 NUC 供电，省了 NUC 自带电源占的空间。\nPD 和 QC 是两种电源快充协议，一般 PD 充电头都支持 QC 协议，反之则不行；与之相对应的，PD 充电头的价格要比 QC 贵很多。\n我也量了一下笔记本充电头的外径 4mm，然后在淘宝看到的参数有两种：\n 4.0*1.35 4.0*1.7  第一次看到这个星号，想当然以为是直径乘以长度，买了 4.0*1.35 就踩坑了。\nDC 头尺寸表示方法 DC 头是家里小电器常用的供电插头，通常是圆的，中心是空的。光猫、路由器、笔记本电脑、台灯等都在用这种接头。DC 头供电比 USB 稳固、可靠、耐用。\nDC 圆头用两组数字来定义一个头的大小，外直径和内直径。\n一个外直径 5.5mm，内直径 2.1mm 的 DC 头，在淘宝上不同店家有两种写法：\n 5.5*2.1 5521  一个小提示，DC 5525 插头兼容 5521，也就是 5525 的插头可以插在 5525 和 5521 的插座上。\nPD 诱骗头 淘宝上的 PD 诱骗器头一般输出电压是 18.5v ~ 20v，笔记本电脑电源输出电压一般在 19v 左右。使用 PD 诱骗头，完美用 PD 头给笔记本电脑和 Surface Pro供电，节约不少桌面空间。\n使用 PD 充电器头+PD 诱骗器给笔记本供电和原装电源体积对比\nPD 诱骗器头的另一侧一般是 type-c 头，使用一根双头 type-c 的线连接 PD\n电源和诱骗器。\nQC 诱骗线／升压线 PD 诱骗器可以解决 19v 左右供电问题，别的小电器用的 DC 头一般是 9V 或者 12v，这就需要另外找一种可以诱骗出 9v 或者 12v 电压的诱骗器。在群里提问后得到关键字“升压线”。后换成“qc 诱骗线”后结果更多。\n用 12v 的 QC 诱骗线给 SmrtClean 超声波清洗机供电，同样节约很多桌面空间。\nQC 诱骗线的另一侧是 USB 插头。\n趣事 家里有个硕方的标签打印机，自带电源是 9v 2.5a，直接插笔记本诱骗器的 19v 供电居然可以正常工作。\n","date":"2020-07-13T14:35:25+08:00","permalink":"https://4ft35t.github.io/post/pd-qc-dc/","title":"PD/QC 电源转 DC 头输出"},{"content":"一个小脚本，[ $status != \u0026quot;success\u0026quot; ] \u0026amp;\u0026amp; exit ２,在 status 值是 success 时，最终的返回状态码是１，而不是０，有点诡异。\n排查 这个写法以前在脚本里经常写，稳定运行未出错。对比之前的脚本后发现差异，之前的脚本 exit 是提前退出，后面还有内容；这个脚本exit是上层调用脚本反馈最终结果，exit 是最后一行。\n修改脚本后一切正常\n1 2 3  status=success [ $status != \u0026#34;success\u0026#34; ] \u0026amp;\u0026amp; exit ２ echo   原因分析 使用　bash -x 可以看出差异，\nexit　在最后一行\n1 2 3  bash -x t.sh + status=success + \u0026#39;[\u0026#39; success \u0026#39;!=\u0026#39; success \u0026#39;]\u0026#39;   exit 不在最后一行\n1 2 3 4  bash -x t.sh + status=success + \u0026#39;[\u0026#39; success \u0026#39;!=\u0026#39; success \u0026#39;]\u0026#39; + echo   shell 会将最后一条命令的返回状态码作为整个脚本的返回状态码。test 在最后一行时，[ $status != \u0026quot;success\u0026quot; ] 的返回结果非0，后面的　\u0026amp;\u0026amp; 内容不会执行，整个脚本结束，脚本返回状态码就是中括号内test命令的反馈状态码。　避坑经验  退出用或逻辑 ||，避免用与逻辑 \u0026amp;\u0026amp; 一定要用 \u0026amp;\u0026amp; 做退出条件时，不能作为脚本或者函数的最后一条命令  上面脚本改造成||退出\n1  [ $status = \u0026#34;success\u0026#34; ] || exit ２   因为是最后一行，还可以直接省略后面的内容\n1  [ $status = \u0026#34;success\u0026#34; ]   ","date":"2020-06-19T17:55:19+08:00","permalink":"https://4ft35t.github.io/post/bash-exit-in-conditional/","title":"bash 条件退出踩坑"},{"content":"淘宝买的 Promark3 RDV2，使用官方仓库的代码https://github.com/Proxmark/proxmark3，编译和刷固件都没问题；使用冰人的固件https://github.com/RfidResearchGroup/proxmark3，编译后刷bootrom.elf 没问题，刷 fullimage.elf 出错 Error: Unexpected reply 0x00fe NACK (expected ACK) Lock Error。\n官方固件编译、烧录、使用都没问题，看到冰人的固件有两条命令很心动，把重复工作自动化，节约时间。\n auto 自动识别卡类型 hf mf autopwn 自动破解 IC 卡密码  编译安装 win 10 的 WSL 可以直接访问串口，很方便。win 10 上的 COM3， 自动映射到 WSL 的 /dev/ttyS3。\n1 2 3 4 5  sudo apt-get install --no-install-recommends git ca-certificates build-essential pkg-config libreadline-dev gcc-arm-none-eabi libnewlib-dev git clone https://github.com/RfidResearchGroup/proxmark3.git cd proxmark3 make clean \u0026amp;\u0026amp; make all   修改 /dev/ttyS3 为所有用户可读写，设备拔插后需要再次执行\nsudo chmod 666 /dev/ttyS3\n同时刷 bootimg 和 fullimage\n./pm3-flash-all\nbootimg 刷成功，刷 fullimage 出错\n Error: Unexpected reply 0x00fe NACK (expected ACK) Lock Error\n 刷预编译固件 在冰人固件的 wiki 中找到 windows 的预编译非 RDV4 版本下载，Generice Proxmark3 devices (non RDV4) [Precompiled builds for RRG / Iceman repository x64\n提取 fullimage.elf 后，顺利刷入。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  kali@DESKTOP-SF5P:~/iceman/proxmark3$ ./pm3-flash ./fullimage.elf [=] Session log /home/kali/.proxmark3/log_20200604.txt [=] Loading Preferences... [+] loaded from JSON file /home/kali/.proxmark3/preferences.json [+] About to use the following file: [+] ./fullimage.elf [+] Waiting for Proxmark3 to appear on /dev/ttyS5 🕑 59 found [=] Available memory on this board: 512K bytes [=] Permitted flash range: 0x00102000-0x00180000 [+] Loading ELF file ./fullimage.elf [+] Loading usable ELF segments: [+] 0: V 0x00102000 P 0x00102000 (0x0003b4d0-\u0026gt;0x0003b4d0) [R X] @0x94 [+] 1: V 0x00200000 P 0x0013d4d0 (0x00001370-\u0026gt;0x00001370) [RW ] @0x3b564 [=] Note: Extending previous segment from 0x3b4d0 to 0x3c840 bytes [+] Flashing... [+] Writing segments for file: ./fullimage.elf [+] 0x00102000..0x0013e83f [0x3c840 / 485 blocks] ................................................................... @@@ @@@@@@@ @@@@@@@@ @@@@@@@@@@ @@@@@@ @@@ @@@ @@! !@@ @@! @@! @@! @@! @@! @@@ @@!@!@@@ !!@ !@! @!!!:! @!! !!@ @!@ @!@!@!@! @!@@!!@! !!: :!! !!: !!: !!: !!: !!! !!: !!! : :: :: : : :: ::: : : : : : :: : . .. .. . . .. ... . . . . . .. . ................................................ OK [+] All done Have a nice day!   解决方案 到这一步可以确认是关键编译参数问题，而非硬件缩水问题233。\n查阅文档后，默认编译的目标平台是 PM3RDV4，非 PM3RDV4 需要设置为 PM3OTHER。\n1 2  echo \u0026#39;PLATFORM=PM3OTHER\u0026#39; \u0026gt; Makefile.platform make clean \u0026amp;\u0026amp; make all   再刷固件就一切顺利\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  kali@DESKTOP-SF5P:~/iceman/proxmark3$ ./pm3-flash-fullimage [=] Session log /home/kali/.proxmark3/logs/log_20200604.txt [=] Loading preferences... [+] loaded from JSON file /home/kali/.proxmark3/preferences.json [+] About to use the following file: [+] /home/kali/iceman/proxmark3/client/../armsrc/obj/fullimage.elf [+] Waiting for Proxmark3 to appear on /dev/ttyS5 🕑 59 found [+] Entering bootloader... [+] (Press and release the button only to abort) [+] Waiting for Proxmark3 to appear on /dev/ttyS5 🕒 48 found [=] Available memory on this board: 512K bytes [=] Permitted flash range: 0x00102000-0x00180000 [+] Loading ELF file /home/kali/iceman/proxmark3/client/../armsrc/obj/fullimage.elf [+] Loading usable ELF segments: [+] 0: V 0x00102000 P 0x00102000 (0x0003b240-\u0026gt;0x0003b240) [R X] @0x94 [+] 1: V 0x00200000 P 0x0013d240 (0x00001360-\u0026gt;0x00001360) [RW ] @0x3b2d4 [=] Note: Extending previous segment from 0x3b240 to 0x3c5a0 bytes [+] Flashing... [+] Writing segments for file: /home/kali/iceman/proxmark3/client/../armsrc/obj/fullimage.elf [+] 0x00102000..0x0013e59f [0x3c5a0 / 483 blocks] ................................................................... @@@ @@@@@@@ @@@@@@@@ @@@@@@@@@@ @@@@@@ @@@ @@@ @@! !@@ @@! @@! @@! @@! @@! @@@ @@!@!@@@ !!@ !@! @!!!:! @!! !!@ @!@ @!@!@!@! @!@@!!@! !!: :!! !!: !!: !!: !!: !!! !!: !!! : :: :: : : :: ::: : : : : : :: : . .. .. . . .. ... . . . . . .. . .............................................. OK [+] All done Have a nice day!   刷完固件后的版本信息\n [ ARM ] bootrom: RRG/Iceman/master/v4.9237-188-gbd5aa92a 2020-06-04 16:05:12 os: RRG/Iceman/master/v4.9237-188-gbd5aa92a 2020-06-04 21:01:01 compiled with GCC 8.3.1 20190703 (release) [gcc-8-branch revision 273027]\n 参考链接   https://github.com/RfidResearchGroup/proxmark3/blob/master/doc/md/Installation_Instructions/Windows-Installation-Instructions.md#compile-and-use-the-project-1\n  https://github.com/RfidResearchGroup/proxmark3/blob/master/doc/md/Use_of_Proxmark/4_Advanced-compilation-parameters.md\n ","date":"2020-06-04T19:21:59+08:00","permalink":"https://4ft35t.github.io/post/promark3-flash-iceman-firmware/","title":"Promark3 使用 冰人（iceman）固件"},{"content":"基于各种复杂环境，ssh 无法直接连接目标主机，需要借助中间的跳板机或者代理来连接。通常使用 ssh-agent 来通过跳板机连接目标主机，使用 ProxyCommand 或者 ProxyJump 连接更方便。\n跳板机 在　~/.ssh/config 中给跳板机一个方便记忆的别名，比如　jumpserver\n1 2 3 4 5  Host jumpserver User root HostName 1.2.3.4 Port 2222 IdentityFile ~/.ssh/jump.pem   之后就可以通过　ssh jumpserver 登录到跳板机。\n通过跳板机连接目标主机：\nssh -o ProxyCommand=\u0026quot;ssh -W %h:%p jumpserver\u0026quot; usr@10.0.0.1\n或者写入 config 文件，使用 ssh dst 直接登录目标主机\n1 2 3 4 5  Host dst User usr HostName 10.0.0.1 Port 22 ProxyCommand ssh -W %h:%p jumpserver   较新版本的 ssh 客户端可以使用 ProxyJump\nssh -J jumpserver usr@10.0.0.1\n或者写入 config 文件\n1 2 3 4 5  Host dst User usr HostName 10.0.0.1 Port 22 ProxyJump jumpserver   不同版本 ssh 客户端的差异如下\nProxyCommand 与 ProxyJump 所有命令向后兼容，新版本可以使用老版本命令\n  远古 SSH 客户端，OpenSSH \u0026lt; 5.4\nProxyCommand ssh jumpserver exec nc %h %p\n或者 ssh -tt usr1@Jumphost ssh -tt usr2@FooServer\n  中古 SSH 客户端，5.4 \u0026lt;= OpenSSH \u0026lt;= 7.2\nProxyCommand ssh jumpserver -W %h:%p\n  现代 SSH 客户端，OpenSSH \u0026gt;= 7.3\nProxyJump jumpserver\n命令行使用 ssh -J jumpserver user@dst-host\n  代理 socks 代理   nc ProxyCommand nc -x 127.0.0.1:1080 %h %p\n  https://github.com/larryhou/connect-proxy ProxyCommand connect-proxy -S 127.0.0.1:1080 %h %p\n  HTTP/HTTPS 代理   nc ProxyCommand nc -X connect -x proxyhost:proxyport %h %p\n  https://github.com/bryanpkc/corkscrew ProxyCommand /usr/local/bin/corkscrew proxyhost proxyport %h %p\n  corkscrew 在代理不稳定时比 nc 可靠\n参考链接  https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Proxies_and_Jump_Hosts https://www.cyberciti.biz/faq/linux-unix-ssh-proxycommand-passing-through-one-host-gateway-server/ ","date":"2020-06-03T16:55:35+08:00","permalink":"https://4ft35t.github.io/post/ssh-porxy/","title":"SSH 跳板机与代理"},{"content":"Win 10 应用商店打开就报 0x80131500 错误，尝试各种方法都不行，最终使用 fiddler 曲线解决。\n尝试过的方法来自 https://answers.microsoft.com/zh-hans/windows/forum/all/%E4%BB%A3%E7%A0%81/cbbe7aaf-8f66-4779-89c8-3c74f5341c7b\n 按 “Windows 徽标键+R”，在运行窗口中，键入“WSReset.exe” 并点击 “运行” 设置→应用→找到microsoft store →高级→重置此应用 打开 IE 浏览器，点击设置，打开 Internet 选项，点击高级，并勾选 “使用SSL 3.0”、”使用 TLS 1.0“、”使用 TLS 1.1“、”使用 TLS 1.2“，应用后重启电脑 卸载并重装应用商店  最终靠知乎的这条答案曲线解决。\nhttps://www.zhihu.com/question/310873087/answer/1127300614\n操作步骤  下载安装 fiddler https://telerik-fiddler.s3.amazonaws.com/fiddler/FiddlerSetup.exe 打开fiddler\u0026mdash;点击左上角winconfig\u0026mdash;给 Microsoft Store 打勾\u0026mdash;点save changes  再次打开应用商店就能正常使用。唯一的缺陷是需要打开 fiddler 才能使用应用商店，不然会报 0x80072EFD 错误。\n","date":"2020-06-03T11:48:10+08:00","permalink":"https://4ft35t.github.io/post/fix-windows-store-0x80131500-error/","title":"解决应用商店 0x80131500 错误"},{"content":"无忧行(JegoTrip)APP是中国移动专门为出境游用户量身打造的APP。在境内也可以使用，移动号码可以在 APP 内接电话和收短信, 轻松实现一机双号。\n具体症状 家里路由器上部署梯子, 国内 IP 直连，其余 IP 走梯子, 国内 IP 库用的 https://github.com/17mon/china_ip_list。连接家里 WIFI，无忧行 APP 启动后，显示“正在连接电话服务器”, 持续 30 秒以上才能连接到服务器，之后才能收到短信；用 4G 则没有这个提示，启动 APP 瞬间就能收到短信。猜测是无忧行服务器的香港 IP 走梯子后比直连慢很多所致。\n排查 IP 从 Pi-hole 导出 jego 相关域名, 192.168.1.123 是手机 IP\n1 2  sqlite3 pihole-FTL.db \u0026#34;select distinct domain from queries where client=\u0026#39;192.168.1.123\u0026#39; and domain like \u0026#39;%jego%\u0026#39;\u0026#34;   得到几个域名\n app1.jegotrip.com.cn\ntms.jegotrip.com.cn\njegotrip-stage.cn-hongkong.log.aliyuncs.com\ncdn.jegotrip.com.cn\noss.jegotrip.com.cn\ncp.jegotrip.com.cn\n 逐一排查后，tms.jegotrip.com.cn 解析到 223.118.41.228, 是香港 IP。\n更新 IP 列表 223.118.41.228 属于 AS58453 自治域，把这个自治域中的几个 IP 段全部追加到国内 IP 列表。\n1 2 3 4  223.118.0.0/15 223.119.0.0/16 223.120.0.0/16 223.121.0.0/16   重启梯子服务后问题解决。\n","date":"2020-04-09T21:48:15+08:00","permalink":"https://4ft35t.github.io/post/jegotrip-takes-long-time-to-connect/","title":"解决无忧行长时间显示“正在连接电话服务器”问题"},{"content":"Hugo 是一款开源的使用 go 语言写的静态网站生成器，生成的静态页面可以轻松部署到 github pages。\nGitHub Actions 是 GitHub 的持续集成服务，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。Github actions 市场，可以搜索别人提交的 actions。\n自动部署要点  username.github.io 只能使用 master 分支 Github actions 的配置 yaml 文件只能放在默认分支  编写脚本 自动部署可以从源码仓库部署到发布仓库，也可以在单一仓库的分支之间部署。 本文的 hugo markdown 文件位于 username.github.io 的 source 分支，生成的 html 文件在同仓库的 master 分支发布。\n切换默认分支 Repository Settings - Branches 切换 source 为默认分支。\n添加 Actions Actions - New workflows，选择 Simple workflow 然后填入以下内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  name:Auto deploy hugoon:push:branches:# 触发分支- sourcejobs:build:runs-on:ubuntu-lateststeps:- name:checkoutuses:actions/checkout@masterwith:submodules:true# 检查 Hugo themes 更新- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#39;latest\u0026#39;- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:deploy_key:${{ secrets.ACTIONS_DEPLOY_KEY }}publish_dir:./publicpublish_branch:master# 部署目的分支  引用的两个 actions 及作用\n peaceiris/actions-hugo 获取最新的 hugo peaceiris/actions-gh-pages 发布静态页面  设置部署权限 可以使用 Github Token 或者私钥给 workflow 仓库写权限。 本文使用私钥，设置步骤如下\n ssh-keygen -t rsa -b 4096 -C \u0026quot;$(git config user.email)\u0026quot; -f gh-pages -N \u0026quot;\u0026quot; 生成公私钥对 Repository Settings - Deploy Keys，粘贴 gh-pages.pub 内容并勾选  Allow write access Repository Settings - Secrets，粘贴 gh-pages 内容, name 必须为 ACTIONS_DEPLOY_KEY   设置完成后，向 source 分支提交代码，会自动生成静态页面发布到 master 分支。 效果类似 参考资料  https://tianhui.xin/blog/2019/11/17/hugousegithubactionstopages/ https://github.com/peaceiris/actions-hugo https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-deploy_key ","date":"2020-04-07T14:03:04+08:00","permalink":"https://4ft35t.github.io/post/hugo-auto-deploy-with-github-actions/","title":"使用 Github Actions 自动部署 Hugo"}]