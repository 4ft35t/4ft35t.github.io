<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>4ft35t blog</title><link>https://4ft35t.github.io/</link><description>Recent content on 4ft35t blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 04 Jun 2020 19:21:59 +0800</lastBuildDate><atom:link href="https://4ft35t.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Promark3 使用 冰人（iceman）固件</title><link>https://4ft35t.github.io/post/promark3-flash-iceman-firmware/</link><pubDate>Thu, 04 Jun 2020 19:21:59 +0800</pubDate><guid>https://4ft35t.github.io/post/promark3-flash-iceman-firmware/</guid><description>&lt;p>淘宝买的 Promark3 RDV2，使用官方仓库的代码https://github.com/Proxmark/proxmark3，编译和刷固件都没问题；使用冰人的固件https://github.com/RfidResearchGroup/proxmark3，编译后刷bootrom.elf 没问题，刷 fullimage.elf 出错 &lt;code>Error: Unexpected reply 0x00fe NACK (expected ACK) Lock Error&lt;/code>。&lt;/p>
&lt;p>官方固件编译、烧录、使用都没问题，看到冰人的固件有两条命令很心动，把重复工作自动化，节约时间。&lt;/p>
&lt;ul>
&lt;li>&lt;code>auto&lt;/code> 自动识别卡类型&lt;/li>
&lt;li>&lt;code>hf mf autopwn&lt;/code> 自动破解 IC 卡密码&lt;/li>
&lt;/ul>
&lt;h3 id="编译安装">编译安装&lt;/h3>
&lt;p>win 10 的 WSL 可以直接访问串口，很方便。win 10 上的 COM3， 自动映射到 WSL 的 /dev/ttyS3。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo apt-get install --no-install-recommends git ca-certificates build-essential pkg-config libreadline-dev gcc-arm-none-eabi libnewlib-dev
git clone https://github.com/RfidResearchGroup/proxmark3.git
cd proxmark3
make clean &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> make all
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 /dev/ttyS3 为所有用户可读写，设备拔插后需要再次执行&lt;/p>
&lt;p>&lt;code>sudo chmod 666 /dev/ttyS3&lt;/code>&lt;/p>
&lt;p>同时刷 bootimg 和 fullimage&lt;/p>
&lt;p>&lt;code>./pm3-flash-all&lt;/code>&lt;/p>
&lt;p>bootimg 刷成功，刷 fullimage 出错&lt;/p>
&lt;blockquote>
&lt;p>Error: Unexpected reply 0x00fe NACK (expected ACK)
Lock Error&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/4ft35t/images@blog/img/2020/20200604192557.png" alt="image-20200604192556929">&lt;/p>
&lt;h3 id="刷预编译固件">刷预编译固件&lt;/h3>
&lt;p>在冰人固件的 wiki 中找到 windows 的预编译非 RDV4 版本下载，Generice Proxmark3 devices (non RDV4) [&lt;a href="https://drive.google.com/open?id=1PI3Xr1mussPBPnYGu4ZjWzGPARK4N7JR">Precompiled builds for RRG / Iceman repository x64&lt;/a>&lt;/p>
&lt;p>提取 fullimage.elf 后，顺利刷入。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kali@DESKTOP-SF5P:~/iceman/proxmark3$ ./pm3-flash ./fullimage.elf
&lt;span style="color:#f92672">[=]&lt;/span> Session log /home/kali/.proxmark3/log_20200604.txt
&lt;span style="color:#f92672">[=]&lt;/span> Loading Preferences...
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> loaded from JSON file /home/kali/.proxmark3/preferences.json
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> About to use the following file:
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> ./fullimage.elf
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Waiting &lt;span style="color:#66d9ef">for&lt;/span> Proxmark3 to appear on /dev/ttyS5
🕑 &lt;span style="color:#ae81ff">59&lt;/span> found
&lt;span style="color:#f92672">[=]&lt;/span> Available memory on this board: 512K bytes
&lt;span style="color:#f92672">[=]&lt;/span> Permitted flash range: 0x00102000-0x00180000
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Loading ELF file ./fullimage.elf
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Loading usable ELF segments:
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> 0: V 0x00102000 P 0x00102000 &lt;span style="color:#f92672">(&lt;/span>0x0003b4d0-&amp;gt;0x0003b4d0&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">[&lt;/span>R X&lt;span style="color:#f92672">]&lt;/span> @0x94
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> 1: V 0x00200000 P 0x0013d4d0 &lt;span style="color:#f92672">(&lt;/span>0x00001370-&amp;gt;0x00001370&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">[&lt;/span>RW &lt;span style="color:#f92672">]&lt;/span> @0x3b564
&lt;span style="color:#f92672">[=]&lt;/span> Note: Extending previous segment from 0x3b4d0 to 0x3c840 bytes
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Flashing...
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Writing segments &lt;span style="color:#66d9ef">for&lt;/span> file: ./fullimage.elf
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> 0x00102000..0x0013e83f &lt;span style="color:#f92672">[&lt;/span>0x3c840 / &lt;span style="color:#ae81ff">485&lt;/span> blocks&lt;span style="color:#f92672">]&lt;/span>
...................................................................
@@@ @@@@@@@ @@@@@@@@ @@@@@@@@@@ @@@@@@ @@@ @@@
@@! !@@ @@! @@! @@! @@! @@! @@@ @@!@!@@@
!!@ !@! @!!!:! @!! !!@ @!@ @!@!@!@! @!@@!!@!
!!: :!! !!: !!: !!: !!: !!! !!: !!!
: :: :: : : :: ::: : : : : : :: :
. .. .. . . .. ... . . . . . .. .
................................................ OK
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> All &lt;span style="color:#66d9ef">done&lt;/span>
Have a nice day!
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="解决方案">解决方案&lt;/h3>
&lt;p>到这一步可以确认是关键编译参数问题，而非硬件缩水问题233。&lt;/p>
&lt;p>查阅文档后，默认编译的目标平台是 PM3RDV4，非 PM3RDV4 需要设置为 PM3OTHER。&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">echo &lt;span style="color:#e6db74">&amp;#39;PLATFORM=PM3OTHER&amp;#39;&lt;/span> &amp;gt; Makefile.platform
make clean &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> make all
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再刷固件就一切顺利&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kali@DESKTOP-SF5P:~/iceman/proxmark3$ ./pm3-flash-fullimage
&lt;span style="color:#f92672">[=]&lt;/span> Session log /home/kali/.proxmark3/logs/log_20200604.txt
&lt;span style="color:#f92672">[=]&lt;/span> Loading preferences...
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> loaded from JSON file /home/kali/.proxmark3/preferences.json
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> About to use the following file:
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> /home/kali/iceman/proxmark3/client/../armsrc/obj/fullimage.elf
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Waiting &lt;span style="color:#66d9ef">for&lt;/span> Proxmark3 to appear on /dev/ttyS5
🕑 &lt;span style="color:#ae81ff">59&lt;/span> found
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Entering bootloader...
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Press and release the button only to abort&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Waiting &lt;span style="color:#66d9ef">for&lt;/span> Proxmark3 to appear on /dev/ttyS5
🕒 &lt;span style="color:#ae81ff">48&lt;/span> found
&lt;span style="color:#f92672">[=]&lt;/span> Available memory on this board: 512K bytes
&lt;span style="color:#f92672">[=]&lt;/span> Permitted flash range: 0x00102000-0x00180000
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Loading ELF file /home/kali/iceman/proxmark3/client/../armsrc/obj/fullimage.elf
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Loading usable ELF segments:
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> 0: V 0x00102000 P 0x00102000 &lt;span style="color:#f92672">(&lt;/span>0x0003b240-&amp;gt;0x0003b240&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">[&lt;/span>R X&lt;span style="color:#f92672">]&lt;/span> @0x94
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> 1: V 0x00200000 P 0x0013d240 &lt;span style="color:#f92672">(&lt;/span>0x00001360-&amp;gt;0x00001360&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">[&lt;/span>RW &lt;span style="color:#f92672">]&lt;/span> @0x3b2d4
&lt;span style="color:#f92672">[=]&lt;/span> Note: Extending previous segment from 0x3b240 to 0x3c5a0 bytes
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Flashing...
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> Writing segments &lt;span style="color:#66d9ef">for&lt;/span> file: /home/kali/iceman/proxmark3/client/../armsrc/obj/fullimage.elf
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> 0x00102000..0x0013e59f &lt;span style="color:#f92672">[&lt;/span>0x3c5a0 / &lt;span style="color:#ae81ff">483&lt;/span> blocks&lt;span style="color:#f92672">]&lt;/span>
...................................................................
@@@ @@@@@@@ @@@@@@@@ @@@@@@@@@@ @@@@@@ @@@ @@@
@@! !@@ @@! @@! @@! @@! @@! @@@ @@!@!@@@
!!@ !@! @!!!:! @!! !!@ @!@ @!@!@!@! @!@@!!@!
!!: :!! !!: !!: !!: !!: !!! !!: !!!
: :: :: : : :: ::: : : : : : :: :
. .. .. . . .. ... . . . . . .. .
.............................................. OK
&lt;span style="color:#f92672">[&lt;/span>+&lt;span style="color:#f92672">]&lt;/span> All &lt;span style="color:#66d9ef">done&lt;/span>
Have a nice day!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>刷完固件后的版本信息&lt;/p>
&lt;blockquote>
&lt;p>[ ARM ]
bootrom: RRG/Iceman/master/v4.9237-188-gbd5aa92a 2020-06-04 16:05:12
os: RRG/Iceman/master/v4.9237-188-gbd5aa92a 2020-06-04 21:01:01
compiled with GCC 8.3.1 20190703 (release) [gcc-8-branch revision 273027]&lt;/p>
&lt;/blockquote>
&lt;h3 id="参考链接">参考链接&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/RfidResearchGroup/proxmark3/blob/master/doc/md/Installation_Instructions/Windows-Installation-Instructions.md#compile-and-use-the-project-1">https://github.com/RfidResearchGroup/proxmark3/blob/master/doc/md/Installation_Instructions/Windows-Installation-Instructions.md#compile-and-use-the-project-1&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/RfidResearchGroup/proxmark3/blob/master/doc/md/Use_of_Proxmark/4_Advanced-compilation-parameters.md">https://github.com/RfidResearchGroup/proxmark3/blob/master/doc/md/Use_of_Proxmark/4_Advanced-compilation-parameters.md&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>SSH 跳板机与代理</title><link>https://4ft35t.github.io/post/ssh-porxy/</link><pubDate>Wed, 03 Jun 2020 16:55:35 +0800</pubDate><guid>https://4ft35t.github.io/post/ssh-porxy/</guid><description>&lt;p>基于各种复杂环境，ssh 无法直接连接目标主机，需要借助中间的跳板机或者代理来连接。通常使用 ssh-agent 来通过跳板机连接目标主机，使用 ProxyCommand 或者 ProxyJump 连接更方便。&lt;/p>
&lt;h3 id="跳板机">跳板机&lt;/h3>
&lt;p>在　&lt;code>~/.ssh/config&lt;/code> 中给跳板机一个方便记忆的别名，比如　jumpserver&lt;/p>
&lt;pre>&lt;code class="language-config" data-lang="config">Host jumpserver
User root
HostName 1.2.3.4
Port 2222
IdentityFile ~/.ssh/jump.pem
&lt;/code>&lt;/pre>&lt;p>之后就可以通过　&lt;code>ssh jumpserver&lt;/code> 登录到跳板机。&lt;/p>
&lt;p>通过跳板机连接目标主机：&lt;/p>
&lt;p>&lt;code>ssh -o ProxyCommand=&amp;quot;ssh -W %h:%p jumpserver&amp;quot; usr@10.0.0.1&lt;/code>&lt;/p>
&lt;p>或者写入 config 文件，使用 &lt;code>ssh dst&lt;/code> 直接登录目标主机&lt;/p>
&lt;pre>&lt;code class="language-config" data-lang="config">Host dst
User usr
HostName 10.0.0.1
Port 22
ProxyCommand ssh -W %h:%p jumpserver
&lt;/code>&lt;/pre>&lt;p>较新版本的 ssh 客户端可以使用 ProxyJump&lt;/p>
&lt;p>&lt;code>ssh -J jumpserver usr@10.0.0.1&lt;/code>&lt;/p>
&lt;p>或者写入 config 文件&lt;/p>
&lt;pre>&lt;code class="language-config" data-lang="config">Host dst
User usr
HostName 10.0.0.1
Port 22
ProxyJump jumpserver
&lt;/code>&lt;/pre>&lt;p>不同版本 ssh 客户端的差异如下&lt;/p>
&lt;p>&lt;strong>ProxyCommand 与 ProxyJump&lt;/strong>
所有命令向后兼容，新版本可以使用老版本命令&lt;/p>
&lt;ul>
&lt;li>
&lt;p>远古 SSH 客户端，OpenSSH &amp;lt; 5.4&lt;/p>
&lt;p>&lt;code>ProxyCommand ssh jumpserver exec nc %h %p&lt;/code>&lt;/p>
&lt;p>或者
&lt;code>ssh -tt usr1@Jumphost ssh -tt usr2@FooServer&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>中古 SSH 客户端，5.4 &amp;lt;= OpenSSH &amp;lt;= 7.2&lt;/p>
&lt;p>&lt;code>ProxyCommand ssh jumpserver -W %h:%p&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>现代 SSH 客户端，OpenSSH &amp;gt;= 7.3&lt;/p>
&lt;p>&lt;code>ProxyJump jumpserver&lt;/code>&lt;/p>
&lt;p>命令行使用
&lt;code>ssh -J jumpserver user@dst-host&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="代理">代理&lt;/h3>
&lt;h4 id="socks-代理">socks 代理&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>nc &lt;code>ProxyCommand nc -x 127.0.0.1:1080 %h %p&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/larryhou/connect-proxy">https://github.com/larryhou/connect-proxy&lt;/a> &lt;code>ProxyCommand connect-proxy -S 127.0.0.1:1080 %h %p&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="httphttps-代理">HTTP/HTTPS 代理&lt;/h4>
&lt;ul>
&lt;li>
&lt;p>nc &lt;code>ProxyCommand nc -X connect -x proxyhost:proxyport %h %p&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/bryanpkc/corkscrew">https://github.com/bryanpkc/corkscrew&lt;/a> &lt;code>ProxyCommand /usr/local/bin/corkscrew proxyhost proxyport %h %p&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>corkscrew 在代理不稳定时比 nc 可靠&lt;/strong>&lt;/p>
&lt;h3 id="参考链接">参考链接&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Proxies_and_Jump_Hosts">https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Proxies_and_Jump_Hosts&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cyberciti.biz/faq/linux-unix-ssh-proxycommand-passing-through-one-host-gateway-server/">https://www.cyberciti.biz/faq/linux-unix-ssh-proxycommand-passing-through-one-host-gateway-server/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>解决应用商店 0x80131500 错误</title><link>https://4ft35t.github.io/post/fix-windows-store-0x80131500-error/</link><pubDate>Wed, 03 Jun 2020 11:48:10 +0800</pubDate><guid>https://4ft35t.github.io/post/fix-windows-store-0x80131500-error/</guid><description>&lt;p>Win 10 应用商店打开就报 0x80131500 错误，尝试各种方法都不行，最终使用 fiddler 曲线解决。&lt;/p>
&lt;p>尝试过的方法来自 &lt;a href="https://answers.microsoft.com/zh-hans/windows/forum/all/%E4%BB%A3%E7%A0%81/cbbe7aaf-8f66-4779-89c8-3c74f5341c7b">https://answers.microsoft.com/zh-hans/windows/forum/all/%E4%BB%A3%E7%A0%81/cbbe7aaf-8f66-4779-89c8-3c74f5341c7b&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;del>按 “Windows 徽标键+R”，在运行窗口中，键入“WSReset.exe” 并点击 “运行”&lt;/del>&lt;/li>
&lt;li>&lt;del>设置→应用→找到microsoft store →高级→重置此应用&lt;/del>&lt;/li>
&lt;li>&lt;del>打开 IE 浏览器，点击设置，打开 Internet 选项，点击高级，并勾选 “使用SSL 3.0”、”使用 TLS 1.0“、”使用 TLS 1.1“、”使用 TLS 1.2“，应用后重启电脑&lt;/del>&lt;/li>
&lt;li>&lt;del>卸载并重装应用商店&lt;/del>&lt;/li>
&lt;/ul>
&lt;p>最终靠知乎的这条答案曲线解决。&lt;/p>
&lt;p>&lt;a href="https://www.zhihu.com/question/310873087/answer/1127300614">https://www.zhihu.com/question/310873087/answer/1127300614&lt;/a>&lt;/p>
&lt;h3 id="操作步骤">操作步骤&lt;/h3>
&lt;ol>
&lt;li>下载安装 fiddler &lt;a href="https://telerik-fiddler.s3.amazonaws.com/fiddler/FiddlerSetup.exe">https://telerik-fiddler.s3.amazonaws.com/fiddler/FiddlerSetup.exe&lt;/a>&lt;/li>
&lt;li>打开fiddler&amp;mdash;点击左上角winconfig&amp;mdash;给 Microsoft Store 打勾&amp;mdash;点save changes&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/4ft35t/images@blog/img/2020/20200603120719.png" alt="image-20200603120155534">&lt;/p>
&lt;p>再次打开应用商店就能正常使用。唯一的缺陷是需要打开 fiddler 才能使用应用商店，不然会报 0x80072EFD 错误。&lt;/p></description></item><item><title>解决无忧行长时间显示“正在连接电话服务器”问题</title><link>https://4ft35t.github.io/post/jegotrip-takes-long-time-to-connect/</link><pubDate>Thu, 09 Apr 2020 21:48:15 +0800</pubDate><guid>https://4ft35t.github.io/post/jegotrip-takes-long-time-to-connect/</guid><description>&lt;p>无忧行(JegoTrip)APP是中国移动专门为出境游用户量身打造的APP。在境内也可以使用，移动号码可以在 APP 内接电话和收短信, 轻松实现一机双号。&lt;/p>
&lt;h2 id="具体症状">具体症状&lt;/h2>
&lt;p>家里路由器上部署梯子, 国内 IP 直连，其余 IP 走梯子, 国内 IP 库用的 &lt;a href="https://github.com/17mon/china_ip_list">https://github.com/17mon/china_ip_list&lt;/a>。连接家里 WIFI，无忧行 APP 启动后，显示“正在连接电话服务器”, 持续 30 秒以上才能连接到服务器，之后才能收到短信；用 4G 则没有这个提示，启动 APP 瞬间就能收到短信。猜测是无忧行服务器的香港 IP 走梯子后比直连慢很多所致。&lt;/p>
&lt;h2 id="排查-ip">排查 IP&lt;/h2>
&lt;p>从 Pi-hole 导出 jego 相关域名, &lt;code>192.168.1.123&lt;/code> 是手机 IP&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash"> sqlite3 pihole-FTL.db &lt;span style="color:#e6db74">&amp;#34;select distinct
&lt;/span>&lt;span style="color:#e6db74"> domain from queries where client=&amp;#39;192.168.1.123&amp;#39; and domain like &amp;#39;%jego%&amp;#39;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>得到几个域名&lt;/p>
&lt;blockquote>
&lt;p>app1.jegotrip.com.cn&lt;br>
tms.jegotrip.com.cn&lt;br>
jegotrip-stage.cn-hongkong.log.aliyuncs.com&lt;br>
cdn.jegotrip.com.cn&lt;br>
oss.jegotrip.com.cn&lt;br>
cp.jegotrip.com.cn&lt;/p>
&lt;/blockquote>
&lt;p>逐一排查后，&lt;strong>tms.jegotrip.com.cn&lt;/strong> 解析到 223.118.41.228, 是香港 IP。&lt;/p>
&lt;h2 id="更新-ip-列表">更新 IP 列表&lt;/h2>
&lt;p>223.118.41.228 属于 AS58453 自治域，把这个自治域中的几个 IP 段全部追加到国内 IP 列表。&lt;/p>
&lt;pre>&lt;code>223.118.0.0/15
223.119.0.0/16
223.120.0.0/16
223.121.0.0/16
&lt;/code>&lt;/pre>&lt;p>重启梯子服务后问题解决。&lt;/p></description></item><item><title>使用 Github Actions 自动部署 Hugo</title><link>https://4ft35t.github.io/post/hugo-auto-deploy-with-github-actions/</link><pubDate>Tue, 07 Apr 2020 14:03:04 +0800</pubDate><guid>https://4ft35t.github.io/post/hugo-auto-deploy-with-github-actions/</guid><description>&lt;p>Hugo 是一款开源的使用 go 语言写的静态网站生成器，生成的静态页面可以轻松部署到 github pages。&lt;/p>
&lt;p>GitHub Actions 是 GitHub 的持续集成服务，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。&lt;a href="https://github.com/marketplace?type=actions">Github actions 市场&lt;/a>，可以搜索别人提交的 actions。&lt;/p>
&lt;h2 id="自动部署要点">自动部署要点&lt;/h2>
&lt;ul>
&lt;li>username.github.io 只能使用 master 分支&lt;/li>
&lt;li>Github actions 的配置 yaml 文件只能放在默认分支&lt;/li>
&lt;/ul>
&lt;h2 id="编写脚本">编写脚本&lt;/h2>
&lt;p>自动部署可以从源码仓库部署到发布仓库，也可以在单一仓库的分支之间部署。
本文的 hugo markdown 文件位于 username.github.io 的 &lt;code>source&lt;/code> 分支，生成的 html 文件在同仓库的 &lt;code>master&lt;/code> 分支发布。&lt;/p>
&lt;h4 id="切换默认分支">切换默认分支&lt;/h4>
&lt;p>&lt;strong>Repository Settings&lt;/strong> - &lt;strong>Branches&lt;/strong> 切换 source 为默认分支。&lt;/p>
&lt;h4 id="添加-actions">添加 Actions&lt;/h4>
&lt;p>&lt;strong>Actions&lt;/strong> - &lt;strong>New workflows&lt;/strong>，选择 &lt;strong>Simple workflow&lt;/strong>
然后填入以下内容&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#66d9ef">name&lt;/span>: Auto deploy hugo
&lt;span style="color:#66d9ef">on&lt;/span>:
&lt;span style="color:#66d9ef">push&lt;/span>:
&lt;span style="color:#66d9ef">branches&lt;/span>: &lt;span style="color:#75715e"># 触发分支&lt;/span>
- source
&lt;span style="color:#66d9ef">jobs&lt;/span>:
&lt;span style="color:#66d9ef">build&lt;/span>:
&lt;span style="color:#66d9ef">runs-on&lt;/span>: ubuntu-latest
&lt;span style="color:#66d9ef">steps&lt;/span>:
- &lt;span style="color:#66d9ef">name&lt;/span>: checkout
&lt;span style="color:#66d9ef">uses&lt;/span>: actions/checkout@master
&lt;span style="color:#66d9ef">with&lt;/span>:
&lt;span style="color:#66d9ef">submodules&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#75715e"># 检查 Hugo themes 更新&lt;/span>
- &lt;span style="color:#66d9ef">name&lt;/span>: Setup Hugo
&lt;span style="color:#66d9ef">uses&lt;/span>: peaceiris/actions-hugo@v2
&lt;span style="color:#66d9ef">with&lt;/span>:
&lt;span style="color:#66d9ef">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;latest&amp;#39;&lt;/span>
- &lt;span style="color:#66d9ef">name&lt;/span>: Build
&lt;span style="color:#66d9ef">run&lt;/span>: hugo --minify
- &lt;span style="color:#66d9ef">name&lt;/span>: Deploy
&lt;span style="color:#66d9ef">uses&lt;/span>: peaceiris/actions-gh-pages@v3
&lt;span style="color:#66d9ef">with&lt;/span>:
&lt;span style="color:#66d9ef">deploy_key&lt;/span>: ${{ secrets.ACTIONS_DEPLOY_KEY }}
&lt;span style="color:#66d9ef">publish_dir&lt;/span>: ./public
&lt;span style="color:#66d9ef">publish_branch&lt;/span>: master &lt;span style="color:#75715e"># 部署目的分支&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>引用的两个 actions 及作用&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/peaceiris/actions-hugo">peaceiris/actions-hugo&lt;/a> 获取最新的 hugo&lt;/li>
&lt;li>&lt;a href="https://github.com/peaceiris/actions-gh-pages">peaceiris/actions-gh-pages&lt;/a> 发布静态页面&lt;/li>
&lt;/ul>
&lt;h2 id="设置部署权限">设置部署权限&lt;/h2>
&lt;p>可以使用 Github Token 或者私钥给 workflow 仓库写权限。
本文使用私钥，设置步骤如下&lt;/p>
&lt;ol>
&lt;li>&lt;code>ssh-keygen -t rsa -b 4096 -C &amp;quot;$(git config user.email)&amp;quot; -f gh-pages -N &amp;quot;&amp;quot;&lt;/code> 生成公私钥对&lt;/li>
&lt;li>&lt;strong>Repository Settings&lt;/strong> - &lt;strong>Deploy Keys&lt;/strong>，粘贴 &lt;code>gh-pages.pub&lt;/code> 内容并勾选 &lt;code> Allow write access&lt;/code>&lt;/li>
&lt;li>&lt;strong>Repository Settings&lt;/strong> - &lt;strong>Secrets&lt;/strong>，粘贴 &lt;code>gh-pages&lt;/code> 内容, name 必须为 &lt;code>ACTIONS_DEPLOY_KEY&lt;/code>
&lt;img src="https://cdn.jsdelivr.net/gh/peaceiris/actions-gh-pages/images/secrets-1.jpg" alt="">&lt;/li>
&lt;/ol>
&lt;p>设置完成后，向 source 分支提交代码，会自动生成静态页面发布到 master 分支。
效果类似
&lt;img src="https://cdn.jsdelivr.net/gh/peaceiris/actions-gh-pages/images/log_overview.jpg" alt="">&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://tianhui.xin/blog/2019/11/17/hugousegithubactionstopages/">https://tianhui.xin/blog/2019/11/17/hugousegithubactionstopages/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/peaceiris/actions-hugo">https://github.com/peaceiris/actions-hugo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-deploy_key">https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-deploy_key&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>关于我</title><link>https://4ft35t.github.io/about/</link><pubDate>Wed, 01 Jan 2014 00:13:27 +0000</pubDate><guid>https://4ft35t.github.io/about/</guid><description>&lt;p>Just about.&lt;/p></description></item><item><title>归档</title><link>https://4ft35t.github.io/archives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://4ft35t.github.io/archives/</guid><description/></item><item><title>搜索</title><link>https://4ft35t.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://4ft35t.github.io/search/</guid><description/></item></channel></rss>